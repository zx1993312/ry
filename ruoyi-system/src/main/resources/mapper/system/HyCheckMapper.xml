<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.HyCheckMapper">
    
    <resultMap type="HyCheck" id="HyCheckResult">
        <result property="id"    column="id"    />
        <result property="employeeId"    column="employee_id"    />
        <result property="deptId"    column="dept_id"    />
        <result property="parentId"    column="parent_id"    />
        <result property="propertyId"    column="property_id"    />
        <association property="sysDept" column="id"
			javaType="SysDept" resultMap="SysDeptResult" />
		<association property="sysUser" column="id"
			javaType="SysUser" resultMap="SysUserResult" />
    </resultMap>

	 <resultMap type="SysDept" id="SysDeptResult">
		<id     property="deptId"     column="dept_id"     />
		<result property="parentId"   column="parent_id"   />
		<result property="ancestors"  column="ancestors"   />
		<result property="deptName"   column="dept_name"   />
		<result property="orderNum"   column="order_num"   />
		<result property="leader"     column="leader"      />
		<result property="phone"      column="phone"       />
		<result property="email"      column="email"       />
		<result property="status"     column="status"      />
		<result property="delFlag"    column="del_flag"    />
		<result property="parentName" column="parent_name" />
		<result property="createBy"   column="create_by"   />
		<result property="createTime" column="create_time" />
		<result property="updateBy"   column="update_by"   />
		<result property="updateTime" column="update_time" />
	</resultMap>
	
	<resultMap type="SysUser" id="SysUserResult">
		<id     property="userId"        column="user_id"         />
		<result property="deptId"        column="dept_id"         />
		<result property="loginName"     column="login_name"      />
		<result property="userName"      column="user_name"       />
		<result property="userType"      column="user_type"       />
		<result property="email"         column="email"           />
		<result property="phonenumber"   column="phonenumber"     />
		<result property="sex"           column="sex"             />
		<result property="avatar"        column="avatar"          />
		<result property="password"      column="password"        />
		<result property="salt"          column="salt"            />
		<result property="status"        column="status"          />
		<result property="delFlag"       column="del_flag"        />
		<result property="loginIp"       column="login_ip"        />
		<result property="loginDate"     column="login_date"      />
		<result property="pwdUpdateDate" column="pwd_update_date" />
		<result property="createBy"      column="create_by"       />
		<result property="createTime"    column="create_time"     />
		<result property="updateBy"      column="update_by"       />
		<result property="updateTime"    column="update_time"     />
		<result property="remark"        column="remark"          />
	</resultMap>
	
    <sql id="selectHyCheckVo">
        select 
        c.id, 
        c.employee_id, 
        c.dept_id,
        c.parent_id,
        c.property_id,
        d.dept_name,
        u.user_name 
        from 
        hy_check c
        LEFT JOIN sys_dept d ON c.dept_id = d.dept_id
        LEFT JOIN sys_user u ON c.employee_id = u.user_id
    </sql>

    <select id="selectHyCheckList" parameterType="HyCheck" resultMap="HyCheckResult">
        <include refid="selectHyCheckVo"/>
        <where>  
            <if test="employeeId != null "> and c.employee_id = #{employeeId}</if>
            <if test="deptId != null "> and c.dept_id = #{deptId}</if>
        </where>
    </select>
    
    <select id="selectHyCheckById" parameterType="Long" resultMap="HyCheckResult">
        <include refid="selectHyCheckVo"/>
        where c.id = #{id}
    </select>
        
    <insert id="insertHyCheck" parameterType="HyCheck" useGeneratedKeys="true" keyProperty="id">
        insert into hy_check
        <trim prefix="(" suffix=")" suffixOverrides=",">
        	<if test="id != null">id,</if>
            <if test="employeeId != null">employee_id,</if>
            <if test="deptId != null">dept_id,</if>
            <if test="parentId != null">parent_id,</if>
            <if test="propertyId != null">property_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
        	<if test="id != null">#{id},</if>
            <if test="employeeId != null">#{employeeId},</if>
            <if test="deptId != null">#{deptId},</if>
            <if test="parentId != null">#{parentId},</if>
            <if test="propertyId != null">#{propertyId},</if>
         </trim>
    </insert>

    <update id="updateHyCheck" parameterType="HyCheck">
        update hy_check
        <trim prefix="SET" suffixOverrides=",">
            <if test="employeeId != null">employee_id = #{employeeId},</if>
            <if test="deptId != null">dept_id = #{deptId},</if>
            <if test="parentId != null">parent_id = #{parentId},</if>
            <if test="propertyId != null">property_id = #{propertyId},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteHyCheckById" parameterType="Long">
        delete from hy_check where id = #{id}
    </delete>

    <delete id="deleteHyCheckByIds" parameterType="String">
        delete from hy_check where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>